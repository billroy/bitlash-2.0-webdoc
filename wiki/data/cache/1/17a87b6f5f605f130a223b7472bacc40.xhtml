
<p>
This is a Bitlash-powered Ethernet web server and telnet console for Arduino.
</p>

<p>
It works with the official <a href="http://www.arduino.cc/en/Main/ArduinoEthernetShield" class="urlextern" title="http://www.arduino.cc/en/Main/ArduinoEthernetShield"  rel="nofollow">Arduino Ethernet shield</a> and compatible Arduino boards.
</p>

<h5><a name="getting_started" id="getting_started">Getting Started</a></h5>
<div class="level5">
<ol>
<li class="level1"><div class="li"> Adjust the IP address, port, and default gateway in the code to be suitable for your network.</div>
</li>
<li class="level1"><div class="li"> Upload the BitlashWebServer sketch to your Arduino</div>
<ul>
<li class="level3"><div class="li"> File → Examples → Bitlash → BitlashWebServer</div>
</li>
<li class="level3"><div class="li">File → Upload</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> For debugging, connect via your favorite Serial Monitor at 57600. You can watch the web traffic and issue commands.</div>
</li>
<li class="level1"><div class="li"> Navigate to the configured IP/port in your browser.  The default settings in the code is <a href="http://192.168.1.27:8080" class="urlextern" title="http://192.168.1.27:8080"  rel="nofollow">http://192.168.1.27:8080</a>.</div>
</li>
<li class="level1"><div class="li"> If you see the “Bitlash web server here!” banner you&#039;ve connected.  You&#039;ll also see the hit logged on the serial monitor.</div>
</li>
<li class="level1"><div class="li"> For remote maintenance, telnet to the same address/port and provide the password.  The default password is “open sesame”; please change it below.</div>
</li>
<li class="level1"><div class="li"> Read the rest, and go make webpages!</div>
</li>
</ol>

<p>
There are two ways to define a web server page:
</p>
<ol>
<li class="level1"><div class="li"> You can compile in pages by modifying the <em>builtin_page_list</em> in the code.  Built-in pages can contain bitlash code that&#039;s within square brackets [ ].  The server executes the code in [ ] while rendering the page output; any printed output the code generates will show up on the page.</div>
</li>
</ol>

<p>
For example: “The uptime is: [print millis]ms” (see the “index” example below)
</p>
<ol>
<li class="level1"><div class="li"> Any Bitlash function whose name begins with the underscore character &#039;_&#039;  is considered a valid <acronym title="Uniform Resource Locator">URL</acronym> mount point and its output is sent as a response when that <acronym title="Uniform Resource Locator">URL</acronym> is invoked.</div>
</li>
</ol>

<p>
For example: the Bitlash function <em>_uptime</em> is called when the url <em>/uptime</em> is requested
</p>
<pre class="code"> function _uptime {print &quot;Uptime is &quot;,millis,&quot;ms&quot;;}</pre>

<p>
From another terminal window we can test what the browser might see:
</p>
<pre class="code">$ curl http://192.168.1.27:8080/uptime
Uptime is 123324 ms
$</pre>

<p>
For example: send the value of analog input 3 when ”…/volt3” is requested:
</p>
<pre class="code">function _volt3 {print a3;}</pre>

</div>

<h5><a name="special_pages_index_and_error" id="special_pages_index_and_error">Special pages _index and _error</a></h5>
<div class="level5">

<p>
If you define a function named <strong>_index</strong>, it will be rendered when the root url is requested.  Think of it as <em>index.html</em>.
</p>

<p>
If you define a function named <strong>_error</strong> it will be rendered when an error occurs, in place of the built-in error page.
</p>

<p>
Both of these uses depend on an additional feature: a page handler defined as a Bitlash function takes priority over a built-in page.  You can use this to mask or override built-in pages.
</p>

</div>

<h5><a name="telnet_access" id="telnet_access">Telnet access</a></h5>
<div class="level5">

<p>
The password-protected telnet console operating on the same IP and port as the web server.
It provides full access to Bitlash, so you can log in with <em>telnet</em> or <em>nc</em> and do bitlash stuff, including of course defining a new <em>_function</em> to expose a new web page.
</p>
<pre class="code">...$ telnet 192.168.1.27 8080
Trying 192.168.1.27...
Connected to 192.168.1.27.
Escape character is &#039;^]&#039;.
open sesame
Bitlash web server here! v0.3
&gt; </pre>

<p>
The default telnet password is “open sesame”; please change it below or risk
becoming a security statistic.
</p>

<p>
Please note that the server is not smart enough to process web requests while a telnet session is open.  (Perhaps this is a feature.)  In any event, you will find it is necessary to quit your telnet connection to test your new page in the browser.
</p>

<p>
To log out, you may use the “logout” command, or the usual ^] followed by quit if you&#039;re using old-school telnet.  If you&#039;re using nc, ^C will quit.
</p>
<pre class="code">#include &lt;SPI.h&gt;
#include &lt;Ethernet.h&gt;
#include &quot;bitlash.h&quot;

// Command line buffer for alternate command input stream
#define LBUFLEN 80
byte llen;
char linebuf[LBUFLEN];

////////////////////////////////////////
//
//	Ethernet configuration
//	Adjust for local conditions
//
byte mac[] 		= {&#039;b&#039;,&#039;i&#039;,&#039;t&#039;,&#039;c&#039;,&#039;h&#039;,&#039;i&#039;};
byte ip[]  		= {192, 168, 1, 27};
byte gateway[] 	= {192, 168, 1, 1};
byte subnet[] 	= {255, 255, 255, 0};
#define PORT 8080

#define PASSPHRASE &quot;open sesame&quot;
#define BAD_PASSWORD_MAX 3

//
////////////////////////////////////////

#define BANNER &quot;Bitlash web server here! v0.3\r\n&quot;
#define INDEX_MACRO &quot;_index&quot;
#define ERROR_MACRO &quot;_error&quot;
#define ERROR_PAGE  &quot;error&quot;

#define CONTENT_TYPE_PLAIN &quot;Content-Type: text/plain\r\n\r\n&quot;	// enable this for plaintext output
#define CONTENT_TYPE_HTML  &quot;Content-Type: text/html\r\n\r\n&quot;	// enable this for HTML output
#define CONTENT_TYPE CONTENT_TYPE_PLAIN

#define HTTP_200_OK &quot;HTTP/1.1 200 OK\r\n&quot;
#define HTTP_404_NOTFOUND &quot;HTTP/1.1 404 Not Found\r\n&quot;

typedef struct {
	const prog_char *url;
	const prog_char *pagetext;
} builtin_page;


/////////////////////////////////////////////
//
// 	Built-in HTML content: Add your new built-in pages here:
//
//	Define a URL mount point and the text of your page like the ones already there
//	Add them to the builtin_pages table just like the ones already there
//
//	Each string needs \0 at the end.  
//	If you leave one off, you are guaranteed an interesting debugging experience
//
//	Lines will run together in text/plain mode without \r\n,
//	so mind your \r\n line endings.
//

// This block generates the built-in index page that is called on /
const prog_char index_url[] PROGMEM = { &quot;index\0&quot; };
const prog_char default_index_page[] PROGMEM = { 
	BANNER
	&quot;Uptime: [print millis,]ms\r\n&quot;
	&quot;Powered by Bitlash.\r\n&quot;
	&quot;\0&quot;	// must be last
};

// This block generates the built-in error page
const prog_char error_url[] PROGMEM = { &quot;error\0&quot; };
const prog_char error_page[] PROGMEM = { &quot;Not found.\r\n\0&quot; };

// Add new pages here, just like these
builtin_page builtin_page_list[] = {
	{ index_url, default_index_page },
	{ error_url, error_page },
	{ 0, 0 }	// marks end, must be last
};

//
//	End of Static HTML content
//
/////////////////////////////////////////////


int findStaticPage(char *pagename) {
int i=0;
const prog_char *name;
	for (;;) {
		name = builtin_page_list[i].url;
		if (!name) break;
		if (!strcmp_P((const char *) pagename, name)) return i;
		i++;
	}
	return(-1);
}


void sendStaticPage(char *pagename) {

	int pageindex = findStaticPage(pagename);
	if (pageindex &lt; 0) return;

	const prog_char *addr = builtin_page_list[pageindex].pagetext;
	for (;;) {
		byte b = pgm_read_byte(addr++);
		if (b == &#039;\0&#039;) break;
		else if (b == &#039;[&#039;) {
			char *optr = linebuf;
			while ((b != &#039;]&#039;) &amp;&amp; ((optr-linebuf) &lt; LBUFLEN)) {
				b = pgm_read_byte(addr++);
				if (b == &#039;]&#039;) {
					*optr = &#039;\0&#039;;
					doCommand(linebuf);
				}
				else *optr++ = b;
			}
		}
		else serialHandler(b);
	}
}

//
/////////////////////////////////////////////


extern void prompt(void);

Server server = Server(PORT);
Client client(MAX_SOCK_NUM);		// declare an inactive client

numvar func_logout(void) {
	client.stop();
}

void serialHandler(byte b) {
	Serial.print(b, BYTE);
	if (client &amp;&amp; client.connected()) client.print((char) b);
}

void sendstring(char *ptr) {
	while (*ptr) serialHandler(*ptr++);
}

byte unlocked;
byte badpasswordcount;

#define IDBUFLEN 13
char pagename[IDBUFLEN];


byte isGET(char *line) {
	return !strncmp(line, &quot;GET /&quot;, 5);
}

byte isUnsupportedHTTP(char *line) {
	return !strncmp(line, &quot;PUT /&quot;, 5) ||
		!strncmp(line, &quot;POST /&quot;, 6) ||
		!strncmp(line, &quot;HEAD /&quot;, 6);
}


void servePage(char *pagename) {
	Serial.print(&quot;\r\nWeb request: &quot;);
	Serial.print(&amp;pagename[1]);
	Serial.print(&quot; &quot;);
	Serial.println(millis());

	if (getValue(pagename) &gt;= 0) {		// _macro
		sendstring(HTTP_200_OK);
		sendstring(CONTENT_TYPE);			// configure this above
		doCommand(pagename);
	}
	else if (findStaticPage(&amp;pagename[1]) &gt;= 0) {	// static page
		sendstring(HTTP_200_OK);
		sendstring(CONTENT_TYPE);			// configure this above
		sendStaticPage(&amp;pagename[1]);
	}
	else {
		sendstring(HTTP_404_NOTFOUND);
		sendstring(CONTENT_TYPE);
		if (getValue(ERROR_MACRO) &gt;= 0) doCommand(ERROR_MACRO);
		else if (findStaticPage(ERROR_PAGE) &gt;= 0) sendStaticPage(ERROR_PAGE);
		else sendstring(&quot;Error: not found.\r\n&quot;);	// shouldn&#039;t happen!
	}
	delay(1);
	client.stop();
}


void handleInputLine(char *line) {

	// check for web GET command: GET /macro HTTP/1.1
	if (isGET(line)) {
		char *iptr = line+5;	// point to first letter of macro name
		char *optr = pagename;
		*optr++ = &#039;_&#039;;			// given &quot;index&quot; we search for macro &quot;_index&quot;
		while (*iptr &amp;&amp; (*iptr != &#039; &#039;) &amp;&amp; ((optr - pagename) &lt; (IDBUFLEN-1))) {
			*optr++ = *iptr++;
		}
		*optr = &#039;\0&#039;;
		if (strlen(pagename) == 1) strcpy(pagename, INDEX_MACRO);	// map / to /index thus _index
		servePage(pagename);
	}
	else if (isUnsupportedHTTP(line)) client.stop();

	// not a web command: if we&#039;re locked, check for the passphrase
	else if (!unlocked) {
		if (!strcmp(line, PASSPHRASE)) {
			sendstring(BANNER);
			unlocked = 1;
			prompt();
		}
		else if ((strlen(line) &gt; 0) &amp;&amp; (++badpasswordcount &gt; BAD_PASSWORD_MAX)) client.stop();
		else {
			if (badpasswordcount) delay(1000);
			sendstring(&quot;Password: &quot;);
		}
	}
	
	// unlocked, it&#039;s apparently a telnet command, execute it
	else {
		doCommand(line);
		prompt();
	}
}


void setup(void) {

	initBitlash(57600);
	Ethernet.begin(mac, ip, gateway, subnet);
	server.begin();

	addBitlashFunction(&quot;logout&quot;, &amp;func_logout);
	setOutputHandler(&amp;serialHandler);
}

void loop(void) {
	
	client = server.available();
	if (client) {
		unlocked = 0;
		badpasswordcount = 0;
		while (client.connected()) {
			if (client.available()) {
				char c = client.read();
				if ((c == &#039;\r&#039;) || (c == &#039;\n&#039;)) {
					if (llen) {
						linebuf[llen] = &#039;\0&#039;;
						handleInputLine(linebuf);
						llen = 0;
					}
				}
				else if (llen &lt; LBUFLEN-1) linebuf[llen++] = c;
				else {;}	// drop overtyping on the floor here
			}
			else runBitlash();
		}
	}
	runBitlash();
}</pre>

</div>
