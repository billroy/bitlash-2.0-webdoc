
<h1 class="sectionedit1"><a name="bitlash_conditionalsif_while_and_switch" id="bitlash_conditionalsif_while_and_switch">Bitlash Conditionals: if, while, and switch</a></h1>
<div class="level1">

<p>
The earlier Bitlash 1.0 language had the limitation that the entire tail of the line was treated as a statement group for <strong>while</strong> and <strong>if</strong>.  And there was no <strong>else</strong>.  This made many constructs clumsy and awkward to express.
</p>

<p>
In Bitlash 2.0 the <strong>while</strong> and <strong>if</strong> commands have been remodeled to act much more like C.  The <strong>while</strong> command iterates either a simple statement or a list of simple statements in curly braces.
</p>

<p>
Execution of the rest of the function continues after the while condition fails, without the previous regard for “rest of the line”.
</p>

<p>
The <strong>if</strong> construct now has an <strong>else</strong> clause, and execution continues after the appropriate if/else clause.
</p>

<p>
Finally, the <strong>switch</strong> command now allows any Bitlash statement to be a case handler.
</p>

</div>
<!-- EDIT1 SECTION "Bitlash Conditionals: if, while, and switch" [1-826] -->
<h3 class="sectionedit2"><a name="while_expr_stmt1stmtn" id="while_expr_stmt1stmtn">while (expr) {stmt1; ...; stmtN;}</a></h3>
<div class="level3">

<p>
The <strong>while</strong> command repeats execution of the while-statements as long as the test expression is true.  When the test expression is false, execution continues  after the while&#039;s statement list.
</p>
<pre class="code">&gt; while (millis() &lt; 100000) {d13=!d13;} print &quot;Done&quot;;
(light flickers)
Done
&gt;</pre>

<p>
Execution of the <strong>while</strong> loop is blocking.  In other words, during the execution of a <strong>while</strong> command, no other functions can run, since Bitlash is working as hard as it can to get to the end of that command line.  The combination of <strong>while 1</strong> with <strong>delay()</strong> is particularly deadly, since it uses the whole processor:
</p>
<pre class="code">&gt; print &quot;this works but NOTE it will hog the whole arduino&quot;
&gt; while 1 {print millis(); delay(1000);}
(no prompt again until you press ^C)</pre>

<p>
Bitlash polls the serial port for Control-C during while loops, so you can break out.
</p>
<hr />

</div>
<!-- EDIT2 SECTION "while (expr) {stmt1; ...; stmtN;}" [827-1732] -->
<h3 class="sectionedit3"><a name="if_expr_stmt1stmtnelse_stmt1stmtn" id="if_expr_stmt1stmtnelse_stmt1stmtn">if (expr) {stmt1; ...; stmtN;} [else {stmt1; ...; stmtN;}]</a></h3>
<div class="level3">

<p>
The <strong>if</strong> command executes the first statement list if the test condition is true; otherwise, the optional else part is executed, if present.
</p>

<p>
Unlike Bitlash 1.0, execution continues on the rest of the program text after the if/else statement.
</p>
<pre class="code">&gt; if (d4) {print &quot;the light is on&quot;;}</pre>

</div>
<!-- EDIT3 SECTION "if (expr) {stmt1; ...; stmtN;} [else {stmt1; ...; stmtN;}]" [1733-2101] -->
<h3 class="sectionedit4"><a name="omitting_for_a_single_statement" id="omitting_for_a_single_statement">Omitting { } for a single statement</a></h3>
<div class="level3">

<p>
When using <strong>while</strong> and <strong>if</strong>, it is legal syntax to omit the {} if only a single statement is to be executed, just like in C.  (In other words a statement is recursively defined as a statement or a list of statements in curly braces.)
</p>
<pre class="code">&gt; i=0; while (++i&lt;3) print i; print &quot;done&quot;;
1
2
done
&gt;</pre>
<hr />

</div>
<!-- EDIT4 SECTION "Omitting { } for a single statement" [2102-2463] -->
<h3 class="sectionedit5"><a name="switch_expr_stmt0stmt1stmtn" id="switch_expr_stmt0stmt1stmtn">switch (expr) {stmt0; stmt1; ...; stmtN;}</a></h3>
<div class="level3">

<p>
The switch command selects one of N statements to execute based on the value of a numeric expression.  This provides a very easy way to build state machines, among other things.
</p>

<p>
Syntax:
</p>
<pre class="code">switch (selection-expression) { stmt0; stmt1; ...; stmtN;}</pre>

<p>
The selection-expression is evaluated to produce an integer result, which is used to select one of the supplied statements in curly braces.  The selected statement, <strong>and only the selected statement</strong> from among those in curly braces, is executed, then execution continues after the switch statement.
</p>

<p>
(Note: This construct is similar to but not strictly compatible with the C switch statement, which has “case x:” tags to specify each case.)
</p>

<p>
If the value of the selection expression is less than zero it is treated as zero and therefore the first supplied statement is executed.  If the value is greater than N, the last statement is executed.
</p>

<p>
Example: This switch statement in the elevator2.btl example calls <strong>wating</strong>, <strong>goingup</strong>, or <strong>goingdown</strong>, depending on the value of s, the variable that represents the state of the elevator system:
</p>
<pre class="code">switch s {waiting; goingup; goingdown;}</pre>

<p>
If the value of s is ⇐ 0, the <strong>waiting</strong> function will be called.
</p>

<p>
If the value of s is == 1, the <strong>goingup</strong> function will be called.
</p>

<p>
If the value of s is &gt;= 2, the <strong>goingdown</strong> function will be called.
</p>

<p>
Example: Unlike Bitlash 1.0, the case handlers can be any Bitlash statement, for example:
</p>
<pre class="code">switch (d) {print &quot;foo&quot;; print &quot;bar&quot;; print &quot;baz&quot;; boot;}</pre>
<hr />

</div>
<!-- EDIT5 SECTION "switch (expr) {stmt0; stmt1; ...; stmtN;}" [2464-4062] -->
<h3 class="sectionedit6"><a name="nesting" id="nesting">Nesting</a></h3>
<div class="level3">

<p>
Nested conditionals work as you would expect:
</p>
<pre class="code">&gt; a=0;while (a++&lt;2) {b=0; while (b++&lt;2) {print a,b;}}
1 1
1 2
2 1
2 2
&gt;  </pre>
<hr />

</div>
<!-- EDIT6 SECTION "Nesting" [4063-4223] -->
<h3 class="sectionedit7"><a name="how_to_simulate_a_for_loop" id="how_to_simulate_a_for_loop">How to simulate a &quot;for&quot; loop</a></h3>
<div class="level3">

<p>
The simplest way is to unroll it as a <strong>while</strong>.  Here is an example that initializes pins 3 through 8 as outputs and sets them to HIGH:
</p>
<pre class="code">&gt; i=3; while i&lt;=8 {pinmode(i,1); dw(i,1); i++;}</pre>

<p>
For extra credit, let&#039;s initialize the even ones on and the odd ones off: 
</p>
<pre class="code">&gt; i=3; while i&lt;=8 {pinmode(i,1); dw(i,(i&amp;1)); i++;}</pre>

</div>
<!-- EDIT7 SECTION "How to simulate a for loop" [4224-] -->