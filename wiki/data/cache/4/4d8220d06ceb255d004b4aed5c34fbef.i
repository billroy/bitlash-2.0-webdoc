a:423:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Printing Overview";i:1;i:2;i:2;i:3;}i:2;i:3;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"There are two ways to print in Bitlash: the legacy ";}i:2;i:34;}i:5;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:85;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"print";}i:2;i:86;}i:7;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:91;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" command, and the printf() function.  The ";}i:2;i:92;}i:9;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:134;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"print";}i:2;i:135;}i:11;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:140;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:" command is handy for printing basic values without much formatting control; it was part of Bitlash 1.0 and is partly retained mainly for backwards compatibility.  The ";}i:2;i:141;}i:13;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:309;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:":x";}i:2;i:310;}i:15;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:312;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" format specifier language will be deprecated in Bitlash 2.1, leaving only the printing of basic values.";}i:2;i:313;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:417;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:417;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"The printf() function is new in Bitlash 2.0.  It is more compatible with standard C and much more capable.  It will be the supported printing pathway going forward.";}i:2;i:419;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:583;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:586;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:51:"printf("format string", value1, value2,... valueN);";i:1;i:2;i:2;i:586;}i:2;i:586;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:586;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:586;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"The printf() function prints values to the console.";}i:2;i:651;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:702;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:702;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"The values are printed under control of a format string, which must contain a specifier for each value to be printed.";}i:2;i:704;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:821;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:821;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"Specifiers are of the format:";}i:2;i:823;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:852;}i:33;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:267:"
Format Specifier := <percent-sign> [[<pad-char>] [<width>]] <specifier>
Example: printf("%d", 7)	prints "7"
Example: printf("%3d", 7)	prints "  7"
Example: printf("%03d", 7)	prints "007"
Example: printf("%s","Hello")	prints "Hello"
Example: printf("%%")		prints "%"
";i:1;N;i:2;N;}i:2;i:859;}i:34;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1135;}i:35;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1141;}i:36;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Table of Format Specifiers";i:1;i:3;i:2;i:1141;}i:2;i:1141;}i:37;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1141;}i:38;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:9;i:2;i:1179;}i:2;i:1178;}i:39;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1178;}i:40;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1178;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Specifier";}i:2;i:1180;}i:42;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1189;}i:43;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1189;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Print Format";}i:2;i:1190;}i:45;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1202;}i:46;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1202;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"Pad";}i:2;i:1203;}i:48;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1206;}i:49;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1207;}i:50;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1207;}i:51;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1207;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"d";}i:2;i:1209;}i:53;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1210;}i:54;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1210;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Decimal, signed";}i:2;i:1211;}i:56;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1226;}i:57;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1226;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"blank unless '0' is specified";}i:2;i:1227;}i:59;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1256;}i:60;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1257;}i:61;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1257;}i:62;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1257;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"x";}i:2;i:1259;}i:64;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1260;}i:65;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1260;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Hexadecimal";}i:2;i:1261;}i:67;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1272;}i:68;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1272;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"blank unless '0' is specified";}i:2;i:1273;}i:70;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1302;}i:71;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1303;}i:72;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1303;}i:73;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1303;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"u";}i:2;i:1305;}i:75;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1306;}i:76;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1306;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Decimal, unsigned";}i:2;i:1307;}i:78;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1324;}i:79;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1324;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"blank unless '0' is specified";}i:2;i:1325;}i:81;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1354;}i:82;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1355;}i:83;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1355;}i:84;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1355;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"b";}i:2;i:1357;}i:86;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1358;}i:87;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1358;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Binary";}i:2;i:1359;}i:89;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1365;}i:90;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1365;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"blank unless '0' is specified";}i:2;i:1366;}i:92;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1395;}i:93;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1396;}i:94;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1396;}i:95;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1396;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"s";}i:2;i:1398;}i:97;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1399;}i:98;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1399;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"String";}i:2;i:1400;}i:100;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1406;}i:101;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1406;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"blank";}i:2;i:1407;}i:103;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1412;}i:104;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1413;}i:105;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1413;}i:106;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1413;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"c";}i:2;i:1415;}i:108;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1416;}i:109;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1416;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Character";}i:2;i:1417;}i:111;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1426;}i:112;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1426;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"the char";}i:2;i:1427;}i:114;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1435;}i:115;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1436;}i:116;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1436;}i:117;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1436;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:1438;}i:119;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1439;}i:120;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1439;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Print-to-Pin";}i:2;i:1440;}i:122;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1452;}i:123;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1452;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"pin number is the passed value";}i:2;i:1453;}i:125;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1483;}i:126;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1484;}i:127;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1484;}i:128;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1484;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"%";}i:2;i:1486;}i:130;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1487;}i:131;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1487;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Print '%'";}i:2;i:1488;}i:133;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1497;}i:134;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1497;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1498;}i:136;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1499;}i:137;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1500;}i:138;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:1500;}i:2;i:1500;}i:139;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1501;}i:140;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1507;}i:141;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Special Characters";i:1;i:3;i:2;i:1507;}i:2;i:1507;}i:142;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1507;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1507;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"The percent sign signals a format specifier in the string.  To print a percent sign, you must double it:";}i:2;i:1537;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1641;}i:146;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:26:"
printf("%%")	 prints '%'
";i:1;N;i:2;N;}i:2;i:1648;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1648;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"The printf() function does not automatically provide a newline at the end of printed output.  You must indicate line endings using the '\n' character:";}i:2;i:1685;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1835;}i:150;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:38:"
printf("The time is: %d\n", millis);
";i:1;N;i:2;N;}i:2;i:1842;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1842;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"You can specify arbitrary hex values in a string constant using \xHH notation:";}i:2;i:1890;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1968;}i:154;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:29:"
printf("\x30");		prints '0'
";i:1;N;i:2;N;}i:2;i:1975;}i:155;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1975;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"Here is a summary of the special characters supported by Bitlash:";}i:2;i:2015;}i:157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2081;}i:158;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:7;i:2;i:2082;}i:2;i:2081;}i:159;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2081;}i:160;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2081;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"Char";}i:2;i:2083;}i:162;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:2087;}i:163;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2087;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"Value";}i:2;i:2088;}i:165;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:2093;}i:166;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2093;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Description";}i:2;i:2094;}i:168;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:2105;}i:169;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2106;}i:170;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2106;}i:171;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2106;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"\r";}i:2;i:2108;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2110;}i:174;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2110;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"0d";}i:2;i:2111;}i:176;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2113;}i:177;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2113;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"carriage return";}i:2;i:2114;}i:179;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2129;}i:180;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2130;}i:181;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2130;}i:182;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2130;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"\n";}i:2;i:2132;}i:184;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2134;}i:185;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2134;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"0a";}i:2;i:2135;}i:187;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2137;}i:188;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2137;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"linefeed";}i:2;i:2138;}i:190;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2146;}i:191;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2147;}i:192;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2147;}i:193;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2147;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"\t";}i:2;i:2149;}i:195;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2151;}i:196;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2151;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"09";}i:2;i:2152;}i:198;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2154;}i:199;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2154;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"tab";}i:2;i:2155;}i:201;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2158;}i:202;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2159;}i:203;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2159;}i:204;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2159;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"\\";}i:2;i:2161;}i:206;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2163;}i:207;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2163;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"'\'";}i:2;i:2164;}i:209;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2167;}i:210;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2167;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"a backslash";}i:2;i:2168;}i:212;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2179;}i:213;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2180;}i:214;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2180;}i:215;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2180;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"\";}i:2;i:2182;}i:217;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2183;}i:218;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2184;}i:219;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2184;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"'";}i:2;i:2185;}i:221;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2186;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"'";}i:2;i:2187;}i:223;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2188;}i:224;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2188;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"a double quote";}i:2;i:2189;}i:226;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2203;}i:227;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2204;}i:228;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2204;}i:229;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2204;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"\xHH";}i:2;i:2206;}i:231;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2210;}i:232;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2210;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"???";}i:2;i:2211;}i:234;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2214;}i:235;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2214;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"hex character specified by HH";}i:2;i:2215;}i:237;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2244;}i:238;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2245;}i:239;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:2245;}i:2;i:2245;}i:240;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2246;}i:241;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2252;}i:242;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Padding";i:1;i:3;i:2;i:2252;}i:2;i:2252;}i:243;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2252;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2252;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"Normally, numeric values and strings are pre-padded with blanks to fill out the specified field width.  You can pre-pad numeric values with zeroes instead by adding a zero before the width character:";}i:2;i:2271;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2470;}i:247;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:32:"
printf("%03d", 7)	prints "007"
";i:1;N;i:2;N;}i:2;i:2477;}i:248;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2518;}i:249;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2524;}i:250;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"The "*" character used as a width";i:1;i:3;i:2;i:2524;}i:2;i:2524;}i:251;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2524;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2524;}i:253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"If the special character '*' is used in place of a width specifier, the next value in the passed-in value list is used as the width:";}i:2;i:2569;}i:254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2701;}i:255;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:69:"
printf("%*d", 3, 7)		prints "  7" - padded to 3 characters with ' '
";i:1;N;i:2;N;}i:2;i:2708;}i:256;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2786;}i:257;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2792;}i:258;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Printing to Alternate Serial Pins";i:1;i:3;i:2;i:2792;}i:2;i:2792;}i:259;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2792;}i:260;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2792;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"You can redirect output to a non-standard serial pin using the '#' specifier, which picks up the pin number to use from the next value in the value list:";}i:2;i:2837;}i:262;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2990;}i:263;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
printf("%#%d", 4, 7)	prints "7" to pin 4 at the default 9600 baud
";i:1;N;i:2;N;}i:2;i:2997;}i:264;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2997;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"It's a kludge, but the width specifier can be used to override the default 9600 baud sending speed:";}i:2;i:3074;}i:266;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3173;}i:267;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:59:"
printf("%4800#%d", 4, 7)	prints "7" to pin 4 at 4800 baud
";i:1;N;i:2;N;}i:2;i:3180;}i:268;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3180;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:"Specifying the baud rate in this way has the same effect as calling baud(4,4800): the pin will remain at the indicated baud rate until it is changed again.";}i:2;i:3249;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3404;}i:271;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3406;}i:272;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Accessing Secondary UARTs with printf";i:1;i:5;i:2;i:3406;}i:2;i:3406;}i:273;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:3406;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3406;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"If you are using an Arduino Mega 1280 or Mega 2560 with Bitlash and you print to pin 18 then Bitlash will automatically use the Serial1 UART rather than software serial for I/O.  (There is currently no support in Bitlash for accessing Serial2 or Serial3 from printf.)";}i:2;i:3451;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3718;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3718;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"Likewise if you are using a Sanguino with the AVR ATmega 644P processor, I/O to pin 11 will use the second UART of the Sanguino rather than software serial.";}i:2;i:3720;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3876;}i:280;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3882;}i:281;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"The Print Comand";i:1;i:2;i:2;i:3882;}i:2;i:3882;}i:282;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3882;}i:283;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3882;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"This section documents the legacy Print command and its options.";}i:2;i:3912;}i:285;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3976;}i:286;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3976;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"The print command will be retained in Bitlash going forward, but the ";}i:2;i:3978;}i:288;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4047;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:":x";}i:2;i:4048;}i:290;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4050;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:" sublanguage will be deprecated in a future version.  Users are advised to migrate to the printf() function with all due haste.";}i:2;i:4051;}i:292;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4179;}i:293;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:4179;}i:294;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4185;}i:295;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Basic Printing: a list of items";i:1;i:3;i:2;i:4185;}i:2;i:4185;}i:296;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4185;}i:297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4185;}i:298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"The simplest form of the print command causes bitlash to print out a bunch of numeric values separated by spaces, followed by a newline:";}i:2;i:4228;}i:299;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4370;}i:300;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:30:"
> print 1, 2+2, 1<<3
1 4 8
>
";i:1;N;i:2;N;}i:2;i:4370;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4370;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"The print command can print string constants as well as numeric expressions, as you may recall from the Hello World example:";}i:2;i:4409;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4539;}i:304;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:48:"
> print "Hello, world!", 123
Hello, world! 123
";i:1;N;i:2;N;}i:2;i:4539;}i:305;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4539;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"To suppress the blank and automatic end of line, print a single value followed by the comma, like this:";}i:2;i:4596;}i:307;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4705;}i:308;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:69:"
> print "Time:",		// Prints Time: with no trailing blank or newline
";i:1;N;i:2;N;}i:2;i:4705;}i:309;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:4783;}i:310;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4789;}i:311;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Printing special characters";i:1;i:3;i:2;i:4789;}i:2;i:4789;}i:312;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4789;}i:313;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4789;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"The rules for special characters are similar to C.  See ";}i:2;i:4828;}i:315;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"Language";i:1;N;}i:2;i:4884;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" for details on constructing string constants with arbitrary ascii characters.";}i:2;i:4896;}i:317;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4975;}i:318;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:4975;}i:319;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4981;}i:320;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Hex, binary, and raw byte output";i:1;i:3;i:2;i:4981;}i:2;i:4981;}i:321;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4981;}i:322;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4981;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"You can specify a modifier to produce several different output types by appending ";}i:2;i:5025;}i:324;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5107;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:":";}i:2;i:5108;}i:326;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"spec";}i:2;i:5109;}i:327;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5113;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" to any expression in a print statement.  Perhaps an example is quickest:";}i:2;i:5114;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5193;}i:330;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:85:"
> print 33, 33:x, 33:b, 33:y, 33:*
33 21 100001 ! *********************************
";i:1;N;i:2;N;}i:2;i:5193;}i:331;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5193;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"Here is a mapping to the Arduino equivalents for hex, binary, and raw byte output:";}i:2;i:5287;}i:333;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5369;}i:334;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:4;i:2;i:5370;}i:2;i:5369;}i:335;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5369;}i:336;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5369;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"to print: ";}i:2;i:5371;}i:338;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5381;}i:339;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:5381;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Bitlash	";}i:2;i:5382;}i:341;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5390;}i:342;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5390;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Arduino ";}i:2;i:5391;}i:344;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5399;}i:345;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5400;}i:346;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5400;}i:347;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5400;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" print hex ";}i:2;i:5402;}i:349;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5413;}i:350;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5413;}i:351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" print value:x ";}i:2;i:5414;}i:352;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5429;}i:353;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5429;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Serial.print(value, HEX)";}i:2;i:5430;}i:355;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5455;}i:356;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5456;}i:357;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5456;}i:358;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5456;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"send ascii byte value ";}i:2;i:5458;}i:360;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5480;}i:361;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5480;}i:362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" print value:y ";}i:2;i:5481;}i:363;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5496;}i:364;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5496;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Serial.print(value, BYTE)";}i:2;i:5497;}i:366;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5523;}i:367;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5524;}i:368;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5524;}i:369;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5524;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"print binary ";}i:2;i:5526;}i:371;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5539;}i:372;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5539;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" print value:b ";}i:2;i:5540;}i:374;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5555;}i:375;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5555;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Serial.print(value, BIN)";}i:2;i:5556;}i:377;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5581;}i:378;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5582;}i:379;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:5582;}i:2;i:5582;}i:380;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5583;}i:381;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5590;}i:382;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Printing Bars";i:1;i:3;i:2;i:5590;}i:2;i:5590;}i:383;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5590;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5590;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"You can print a bar of N '*' characters using the :* format specifier, as shown in the example above.  Any single-byte symbol will work (+-*/<>%:).
Here's a cheap, low-res oscilloscope on pin A3 with adjustable temporal resolution:";}i:2;i:5615;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5852;}i:387;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:51:"
> while 1: print map(a3,0,1024,10,50):*; delay(5)
";i:1;N;i:2;N;}i:2;i:5852;}i:388;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5912;}i:389;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5918;}i:390;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:45:"Serial Output to Alternate Pins: print #n:...";i:1;i:3;i:2;i:5918;}i:2;i:5918;}i:391;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5918;}i:392;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5918;}i:393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"Bitlash includes a software serial output capability which supports transmitting on any available output pin at a user-specified baud rate.  This makes it straightforward to integrate additional serial devices with an Arduino.";}i:2;i:5975;}i:394;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6201;}i:395;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6201;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"You send output to an alternate output pin using the ";}i:2;i:6203;}i:397;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6256;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"print #n:";}i:2;i:6257;}i:399;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6266;}i:400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" construct, where ";}i:2;i:6267;}i:401;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6285;}i:402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"n";}i:2;i:6286;}i:403;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6287;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" is the Arduino pin number designator for the desired the output pin:";}i:2;i:6288;}i:405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6363;}i:406;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:58:"
> print #6:"EMERGENCY DESTRUCT SEQUENCE ALPHA CONFIRMED"
";i:1;N;i:2;N;}i:2;i:6363;}i:407;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6363;}i:408;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"By default bitlash will send output at 9600 baud.  If you require a different baud rate use the baud function:";}i:2;i:6431;}i:409;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6547;}i:410;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:97:"
> baud(4,4800)	    // set baud on pin 4 to 4800
> print #4:"ATZ"    // send some stuff on pin 4
";i:1;N;i:2;N;}i:2;i:6547;}i:411;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6547;}i:412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"Note: print #n: is blocking: background tasks will pause while output is being printed.";}i:2;i:6654;}i:413;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6741;}i:414;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6743;}i:415;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:48:"Example: Clear the Screen on Sparkfun Serial LCD";i:1;i:5;i:2;i:6743;}i:2;i:6743;}i:416;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:6743;}i:417;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6743;}i:418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:352:"Here is an example combining the use of printing to an arbitrary pin, printing special characters, and (importantly!) suppressing the inter-item and inter-line spacing that bitlash would normally generate.  Assume the serial LCD is on pin 4 and that all pin setup and baud rate initialization has been performed.  Then this macro will clear the screen:";}i:2;i:6799;}i:419;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7157;}i:420;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:39:"
function cls {print #4:"\xfe\x01\",;}
";i:1;N;i:2;N;}i:2;i:7157;}i:421;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7205;}i:422;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:7205;}}