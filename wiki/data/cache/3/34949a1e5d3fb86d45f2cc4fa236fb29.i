a:409:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Bitlash Built-In Function Reference";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"This is an alphabetical reference listing all the built-in functions provided in Bitlash.";}i:2;i:50;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:139;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:139;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:"Many Bitlash functions are straight pass-throughs from the Arduino functions of the same name.  Therefore, the definitive reference for the behavior of the functions is ";}i:2;i:141;}i:8;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:16:"arduino>Extended";i:1;s:35:"the Arduino Extended Reference Page";i:2;s:7:"arduino";i:3;s:8:"Extended";}i:2;i:310;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:366;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:367;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:367;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"Functions may be used in expressions in the normal way: abs(ar(3)-256) and so forth.  ";}i:2;i:369;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:455;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:455;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Bear in mind that functions return 32-bit integer values (";}i:2;i:457;}i:16;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:515;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"signed long";}i:2;i:517;}i:18;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:528;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:530;}i:20;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:534;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"int32_t";}i:2;i:536;}i:22;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:543;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" in C).  Whether the value is interpreted as signed or unsigned depends on the function.";}i:2;i:545;}i:24;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:633;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:633;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"It is an error to call a function with the wrong number of arguments.";}i:2;i:635;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:704;}i:28;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:704;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"For functions of zero arguments you may omit the empty parens ():";}i:2;i:706;}i:30;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:777;}i:31;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:57:"
> print free,free(),millis,millis()
335 335 24455 24456
";i:1;N;i:2;N;}i:2;i:777;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:777;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"See also ";}i:2;i:844;}i:34;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"commands";i:1;s:16:"Bitlash commands";}i:2;i:853;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" and the ";}i:2;i:882;}i:36;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"language";i:1;s:16:"Bitlash language";}i:2;i:891;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:920;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:921;}i:39;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:921;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:928;}i:41;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"abs(x): absolute value";i:1;i:3;i:2;i:928;}i:2;i:928;}i:42;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:928;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:928;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Return x < 0 ? -x : x.  See ";}i:2;i:962;}i:45;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:11:"arduino>abs";i:1;N;i:2;s:7:"arduino";i:3;s:3:"abs";}i:2;i:990;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1005;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1007;}i:48;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1007;}i:49;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1013;}i:50;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"ar(apin): analogRead(apin)";i:1;i:3;i:2;i:1013;}i:2;i:1013;}i:51;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1013;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1013;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"Return a 10-bit analog-to-digital conversion value from the specified ";}i:2;i:1051;}i:54;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1121;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"analog input pin";}i:2;i:1123;}i:56;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1139;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:".  See ";}i:2;i:1141;}i:58;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:18:"arduino>analogRead";i:1;N;i:2;s:7:"arduino";i:3;s:10:"analogRead";}i:2;i:1148;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1170;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1172;}i:61;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1172;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1178;}i:63;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"aw(dpin,value): analogWrite(dpin,value)";i:1;i:3;i:2;i:1178;}i:2;i:1178;}i:64;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1178;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1178;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Write a PWM value to a ";}i:2;i:1229;}i:67;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1252;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" digital pwm output pin";}i:2;i:1254;}i:69;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1277;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:".  The pin must be prepared for output beforehand via pinmode(pin,1). ";}i:2;i:1279;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1349;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1349;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"A simpler syntax if the pin is fixed is: a6=128";}i:2;i:1351;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1398;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1398;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:1400;}i:77;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"arduino>analogWrite";i:1;N;i:2;s:7:"arduino";i:3;s:11:"analogWrite";}i:2;i:1404;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1427;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1429;}i:80;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1429;}i:81;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1435;}i:82;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:48:"baud(pin,baud): set baud rate for printed output";i:1;i:3;i:2;i:1435;}i:2;i:1435;}i:83;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1435;}i:84;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1435;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:"By default, Arduino prints at 57600 on pin 0 and 9600 on any other pin.  If you wish to set a different rate use the baud function:";}i:2;i:1495;}i:86;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1632;}i:87;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:167:"
> baud(5, 4800);	// prepare "print #5:" to produce serial output on pin 5 at 4800 baud (8,n,1) 
> baud(0, 9600);	// set the default/hardware serial port to 9600 baud
";i:1;N;i:2;N;}i:2;i:1632;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1632;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:1809;}i:90;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"printing";i:1;N;}i:2;i:1813;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1825;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1827;}i:93;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1827;}i:94;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1833;}i:95;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"bc(val, bitnum): bitclear";i:1;i:3;i:2;i:1833;}i:2;i:1833;}i:96;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1833;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1833;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"Returns val with the bit indicated by bitnum [0..31] set to 0.";}i:2;i:1870;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1932;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1932;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:1934;}i:102;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:16:"arduino>bitclear";i:1;N;i:2;s:7:"arduino";i:3;s:8:"bitclear";}i:2;i:1938;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1958;}i:104;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1960;}i:105;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1960;}i:106;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1966;}i:107;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"beep(pin, frequencyhz, durationms)";i:1;i:3;i:2;i:1966;}i:2;i:1966;}i:108;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1966;}i:109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1966;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"Toggle the specified pin at the specified frequency for the specified duration.  Automatically sets pinMode to OUTPUT.  ";}i:2;i:2012;}i:111;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2132;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2132;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Beep is blocking: background execution is paused.  Use caution for long durations: there is no way to break out of a long beep (the longest value is several days).";}i:2;i:2134;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2303;}i:115;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:73:"
> beep(11,440,200)	// make the beeper on pin 11 beep at 440Hz for 200ms
";i:1;N;i:2;N;}i:2;i:2303;}i:116;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2385;}i:117;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2391;}i:118;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"br(val, bitnum): bitread";i:1;i:3;i:2;i:2391;}i:2;i:2391;}i:119;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2391;}i:120;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2391;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"Returns the value of the bitnum'th bit [0..31] in val.";}i:2;i:2427;}i:122;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2481;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2481;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:2483;}i:125;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:15:"arduino>bitread";i:1;N;i:2;s:7:"arduino";i:3;s:7:"bitread";}i:2;i:2487;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2506;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2508;}i:128;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2508;}i:129;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2514;}i:130;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"bs(val, bitnum): bitset";i:1;i:3;i:2;i:2514;}i:2;i:2514;}i:131;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2514;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2514;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"Returns val with the bitnum'th bit [0..31] set.";}i:2;i:2549;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2596;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2596;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:2598;}i:137;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:14:"arduino>bitset";i:1;N;i:2;s:7:"arduino";i:3;s:6:"bitset";}i:2;i:2602;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2620;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2622;}i:140;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2622;}i:141;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2628;}i:142;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"bw(val, bitnum, bitval): bitwrite";i:1;i:3;i:2;i:2628;}i:2;i:2628;}i:143;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2628;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2628;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"Returns val with the bitnum'th bit [0..31] set to bitval [0|!0].";}i:2;i:2673;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2737;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2737;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:2739;}i:149;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:16:"arduino>bitwrite";i:1;N;i:2;s:7:"arduino";i:3;s:8:"bitwrite";}i:2;i:2743;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2763;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2765;}i:152;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2765;}i:153;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2771;}i:154;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"constrain(val,min,max)";i:1;i:3;i:2;i:2771;}i:2;i:2771;}i:155;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2771;}i:156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2771;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Returns the closest value to val between min and max.";}i:2;i:2805;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2858;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2858;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:2860;}i:161;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:17:"arduino>constrain";i:1;N;i:2;s:7:"arduino";i:3;s:9:"constrain";}i:2;i:2864;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2885;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2887;}i:164;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2887;}i:165;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2893;}i:166;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"delay(milliseconds)";i:1;i:3;i:2;i:2893;}i:2;i:2893;}i:167;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2893;}i:168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2893;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"Pause execution for the specified number of milliseconds.";}i:2;i:2924;}i:170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2981;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2981;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"Delay is blocking; nothing else happens while a delay() is being processed.  For this reason is it better to use background functions to do things that span non-trivial time.";}i:2;i:2983;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3157;}i:174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3157;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:3159;}i:176;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:13:"arduino>delay";i:1;N;i:2;s:7:"arduino";i:3;s:5:"delay";}i:2;i:3163;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3180;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3182;}i:179;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3182;}i:180;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3188;}i:181;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"dr(dpin): digitalRead(dpin)";i:1;i:3;i:2;i:3188;}i:2;i:3188;}i:182;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3188;}i:183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3188;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"The dr() function is shorthand for digitalRead().  It returns the current logic level on the specified pin.";}i:2;i:3227;}i:185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3334;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3334;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"If the pin is fixed and known beforehand you can use ";}i:2;i:3336;}i:188;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3389;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"pin variable";}i:2;i:3391;}i:190;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3403;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" notation instead:";}i:2;i:3405;}i:192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3429;}i:193;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:108:"
> z = 13
> x = dr(z)   // return digitalRead(13)

> x = d13     // same result using pin variable notation
";i:1;N;i:2;N;}i:2;i:3429;}i:194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3429;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:3547;}i:196;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:19:"arduino>digitalRead";i:1;N;i:2;s:7:"arduino";i:3;s:11:"digitalRead";}i:2;i:3551;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3574;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3576;}i:199;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3576;}i:200;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3582;}i:201;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"dw(dpin,bval)";i:1;i:3;i:2;i:3582;}i:2;i:3582;}i:202;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3582;}i:203;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3582;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"digitalWrite: Set the designated pin to the given boolean value.";}i:2;i:3607;}i:205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3671;}i:206;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3671;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:3673;}i:208;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:20:"arduino>digitalWrite";i:1;N;i:2;s:7:"arduino";i:3;s:12:"digitalWrite";}i:2;i:3677;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3701;}i:210;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3703;}i:211;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3703;}i:212;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3709;}i:213;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"er(addr): EEPROM.read(addr)";i:1;i:3;i:2;i:3709;}i:2;i:3709;}i:214;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3709;}i:215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3709;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"Return the value stored in EEPROM at the specified address.";}i:2;i:3748;}i:217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3808;}i:218;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3808;}i:219;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3815;}i:220;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"ew(addr, value): EEPROM.write(addr, value)";i:1;i:3;i:2;i:3815;}i:2;i:3815;}i:221;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3815;}i:222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3815;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"Write one-byte value to EEPROM at addr.";}i:2;i:3869;}i:224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3908;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3908;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:3910;}i:227;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:14:"arduino>EEPROM";i:1;N;i:2;s:7:"arduino";i:3;s:6:"EEPROM";}i:2;i:3914;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3932;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3933;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3933;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"More on Bitlash and EEPROM at ";}i:2;i:3935;}i:232;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:16:"bitlashfunctions";i:1;N;}i:2;i:3965;}i:233;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:3985;}i:234;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3987;}i:235;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3987;}i:236;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3994;}i:237;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"free()";i:1;i:3;i:2;i:3994;}i:2;i:3994;}i:238;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3994;}i:239;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3994;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"Returns the amount of memory between the top of the heap and the stack pointer; in other words, the amount of stack space Bitlash and all your other code, including interrupt handlers, have to work with.";}i:2;i:4012;}i:241;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4215;}i:242;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4215;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"Numbers less than 50 or so indicate ram starvation and mean that the odd behavior you are seeing (or will see soon) is attributable to the occasional excursion of the stack into the defined ram area, piddling on the interpreter state.  Nothing good will come of this.";}i:2;i:4217;}i:244;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4484;}i:245;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4484;}i:246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"Note that malloc() and free() are not used by or included in Bitlash and the free memory calculation takes no heed of memory broken out of the heap if you should include them for your code.  ";}i:2;i:4486;}i:247;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4677;}i:248;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4677;}i:249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"The free() function will issue an exception if free memory appears to be less than zero.";}i:2;i:4679;}i:250;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4768;}i:251;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:4768;}i:252;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4774;}i:253;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"inb(reg)";i:1;i:3;i:2;i:4774;}i:2;i:4774;}i:254;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4774;}i:255;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4774;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"Return the 8-bit value of the specified AVR processor register.";}i:2;i:4794;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4857;}i:258;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4857;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"The processor registers and their functions are the function of the extensive ";}i:2;i:4859;}i:260;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf";i:1;s:21:"ATmega328P Data Sheet";}i:2;i:4937;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:".  You will find a convenient cross reference chart of the registers starting on page 425.";}i:2;i:5024;}i:262;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5114;}i:263;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5114;}i:264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"You specify a register address (from the first column of the table on pp. 425 ff.) to tell the inb() and outb() which register to address.  In the case where the table has two addresses, use the right-hand one. ";}i:2;i:5116;}i:265;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5327;}i:266;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5327;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"For example, to read the Timer0 count register TCNT0, find its entry on page 470 and note its address is 0x46. Then, to read and print it in Bitlash:";}i:2;i:5329;}i:268;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5478;}i:269;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:17:"
print inb(0x46)
";i:1;N;i:2;N;}i:2;i:5485;}i:270;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5512;}i:271;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5519;}i:272;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"map(val, fromlow, fromhigh, tolow, tohigh)";i:1;i:3;i:2;i:5519;}i:2;i:5519;}i:273;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5519;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5519;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"Constrains val to [fromlow..fromhigh] and then maps it linearly to [tolow..tohigh].  Got it?";}i:2;i:5573;}i:276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5665;}i:277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5665;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"NOTE: The map() function is deprecated as of Bitlash version 1.1 and is therefore not included in the build.";}i:2;i:5667;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5775;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5775;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:5777;}i:282;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:11:"arduino>map";i:1;N;i:2;s:7:"arduino";i:3;s:3:"map";}i:2;i:5781;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5796;}i:284;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5798;}i:285;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5798;}i:286;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5805;}i:287;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"max(a,b)";i:1;i:3;i:2;i:5805;}i:2;i:5805;}i:288;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5805;}i:289;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5805;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Returns the greater of a and b.";}i:2;i:5825;}i:291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5856;}i:292;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5856;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:5858;}i:294;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:11:"arduino>max";i:1;N;i:2;s:7:"arduino";i:3;s:3:"max";}i:2;i:5862;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5877;}i:296;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5879;}i:297;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5879;}i:298;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5885;}i:299;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"millis()";i:1;i:3;i:2;i:5885;}i:2;i:5885;}i:300;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5885;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5885;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"Returns the number of milliseconds since startup.";}i:2;i:5905;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5954;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5954;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:5956;}i:306;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:14:"arduino>millis";i:1;N;i:2;s:7:"arduino";i:3;s:6:"millis";}i:2;i:5960;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:5978;}i:308;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5979;}i:309;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:5979;}i:310;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5985;}i:311;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"min(a,b)";i:1;i:3;i:2;i:5985;}i:2;i:5985;}i:312;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5985;}i:313;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5985;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Returns the lesser of a and b.";}i:2;i:6005;}i:315;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6035;}i:316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6035;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:6037;}i:318;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:11:"arduino>min";i:1;N;i:2;s:7:"arduino";i:3;s:3:"min";}i:2;i:6041;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:6056;}i:320;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6057;}i:321;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:6057;}i:322;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6063;}i:323;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"outb(reg,value)";i:1;i:3;i:2;i:6063;}i:2;i:6063;}i:324;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6063;}i:325;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6063;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"Set the specified AVR processor register to the given value.";}i:2;i:6091;}i:327;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6151;}i:328;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6151;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"The processor registers and their functions are the function of the extensive ";}i:2;i:6153;}i:330;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf";i:1;s:21:"ATmega328P Data Sheet";}i:2;i:6231;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:".  You will find a convenient cross reference chart of the registers starting on page 425.";}i:2;i:6318;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6408;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6408;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:211:"You specify a register address (from the first column of the table on pp. 425 ff.) to tell the inb() and outb() which register to address.  In the case where the table has two addresses, use the right-hand one. ";}i:2;i:6410;}i:335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6621;}i:336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6621;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"For example, to set the OCR0A register (0x47) to control timer 0 PWM, you could say:";}i:2;i:6623;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6707;}i:339;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:17:"
outb(0x47, 128)
";i:1;N;i:2;N;}i:2;i:6714;}i:340;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:6739;}i:341;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6746;}i:342;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"pinmode(pin,outie)";i:1;i:3;i:2;i:6746;}i:2;i:6746;}i:343;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6746;}i:344;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6746;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Set the pin to an output pin if ";}i:2;i:6776;}i:346;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6808;}i:347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"outie";}i:2;i:6810;}i:348;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6815;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" is true.";}i:2;i:6817;}i:350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6826;}i:351;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6826;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:6828;}i:353;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:15:"arduino>pinMode";i:1;N;i:2;s:7:"arduino";i:3;s:7:"pinMode";}i:2;i:6832;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:6851;}i:355;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6853;}i:356;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:6853;}i:357;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6859;}i:358;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"pulsein(pin, value, timeout)";i:1;i:3;i:2;i:6859;}i:2;i:6859;}i:359;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6859;}i:360;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6859;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Times an input pulse.  See ";}i:2;i:6899;}i:362;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:15:"arduino>pulseIn";i:1;N;i:2;s:7:"arduino";i:3;s:7:"pulseIn";}i:2;i:6926;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:6945;}i:364;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6947;}i:365;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:6947;}i:366;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6955;}i:367;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"random(max)";i:1;i:3;i:2;i:6955;}i:2;i:6955;}i:368;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6955;}i:369;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6955;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Returns a random number between 0 and max-1.";}i:2;i:6978;}i:371;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7022;}i:372;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7022;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:7024;}i:374;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:14:"arduino>random";i:1;N;i:2;s:7:"arduino";i:3;s:6:"random";}i:2;i:7028;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:7046;}i:376;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7047;}i:377;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:7047;}i:378;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7055;}i:379;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:42:"shiftout(dataPin, clkPin, bitOrder, value)";i:1;i:3;i:2;i:7055;}i:2;i:7055;}i:380;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7055;}i:381;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7055;}i:382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"Bitbang the provided value out the data pin, clocking with the clock pin.";}i:2;i:7109;}i:383;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7182;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7182;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"See ";}i:2;i:7184;}i:386;a:3:{i:0;s:13:"interwikilink";i:1;a:4:{i:0;s:16:"arduino>shiftOut";i:1;N;i:2;s:7:"arduino";i:3;s:8:"shiftOut";}i:2;i:7188;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:7208;}i:388;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7209;}i:389;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:7209;}i:390;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7216;}i:391;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"sign(value)";i:1;i:3;i:2;i:7216;}i:2;i:7216;}i:392;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7216;}i:393;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7216;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"Return -1 if value is negative, 0 if 0, or 1 if positive.";}i:2;i:7239;}i:395;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7296;}i:396;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:7296;}i:397;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7304;}i:398;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:61:"snooze(snoozems): defer background task execution for a while";i:1;i:3;i:2;i:7304;}i:2;i:7304;}i:399;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7304;}i:400;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7304;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"Suspend further invocations of this background macro for snoozemillis milliseconds.  See the page on ";}i:2;i:7377;}i:402;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:19:"backgroundfunctions";i:1;s:20:"Background Functions";}i:2;i:7478;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" for details on multitasking with snooze.";}i:2;i:7522;}i:404;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7563;}i:405;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:88:"
> function blink13 {d13=!d13; snooze(100);}
> run blink13	// only toggles every 100 ms
";i:1;N;i:2;N;}i:2;i:7570;}i:406;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:7667;}i:407;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7672;}i:408;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:7672;}}