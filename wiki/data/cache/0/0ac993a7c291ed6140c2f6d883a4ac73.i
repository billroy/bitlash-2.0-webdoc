a:118:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"The Bitlash Language";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:34;}i:4;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40;}i:5;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:41:"How It Works: The Bitlash Execution Model";i:1;i:3;i:2;i:40;}i:2;i:40;}i:6;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:40;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"It helps to start by thinking of Bitlash as a dumb command line calculator.  You type a line of commands and press Enter; Bitlash interprets the line and returns you to the prompt.";}i:2;i:93;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:273;}i:10;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:273;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"It may help to formalize the idea of ";}i:2;i:275;}i:12;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:16:"bitlashfunctions";i:1;s:17:"Bitlash Functions";}i:2;i:312;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:320:" a little bit, too.  A function is a command line, with a name, stored in EEPROM.  When you invoke to a function by using its name, Bitlash suspends what it's doing working your main command to execute the function, which is interpreted just as though you typed the function's text.  Effectively it is a subroutine call.";}i:2;i:350;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:670;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:670;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"Think of background functions as stored command lines scheduled to be run periodically.  When you say ";}i:2;i:672;}i:17;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:774;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"run toggle13,1000";}i:2;i:776;}i:19;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:793;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:", it means ";}i:2;i:795;}i:21;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:806;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"whatever else may be happening, please execute the ";}i:2;i:807;}i:23;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:858;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"toggle13";}i:2;i:860;}i:25;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:868;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" function about every 1000 milliseconds.";}i:2;i:870;}i:27;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:910;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:911;}i:29;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:913;}i:30;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Grammar, from the top down";i:1;i:3;i:2;i:913;}i:2;i:913;}i:31;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:913;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:913;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"So, then, a little more formally:";}i:2;i:951;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:984;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:984;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"A command line is one or more statements separated by semicolons.";}i:2;i:986;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1051;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1051;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"A statement, in turn, is either a command, an assignment, or an expression.";}i:2;i:1053;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1128;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1128;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"A command is one of: [boot help if ls peep print ps rm run snooze stop switch while].  See ";}i:2;i:1130;}i:43;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:8:"Commands";i:1;N;}i:2;i:1221;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" for details.";}i:2;i:1233;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1246;}i:46;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1246;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"An assignment is of the form variable = expression.";}i:2;i:1248;}i:48;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1299;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1299;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Read on for more on variables, expressions, and operators.";}i:2;i:1301;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1359;}i:52;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1359;}i:53;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1366;}i:54;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"Built-in Numeric Variables: ['a'..'z']";i:1;i:3;i:2;i:1366;}i:2;i:1366;}i:55;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1366;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1366;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"You get 26 built-in 32-bit signed integer variable named lowercase 'a' through lowercase 'z'.  These variables are initialized to zero at boot time like any other C storage.";}i:2;i:1416;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1589;}i:59;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:42:"
> i=10; while i-- print i, 
9876543210> 
";i:1;N;i:2;N;}i:2;i:1596;}i:60;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:1646;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1652;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:64:"Pin Variables: Names for the Arduino Pins [a0..a7] and [d0..d22]";i:1;i:3;i:2;i:1652;}i:2;i:1652;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1652;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1652;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"You can refer to specific analog and digital pins using ";}i:2;i:1728;}i:66;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1784;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"pin variables";}i:2;i:1786;}i:68;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1799;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:".  Pin variables are of the form a0, a1, a2, ";}i:2;i:1801;}i:70;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:1846;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" a7 and d0, d1, d2, ";}i:2;i:1849;}i:72;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:1869;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:" d22.
When a pin variable is used in an expression it is a shorthand for digitalRead (for the d0.d22 pin variables) or analogRead (for a0..a7).";}i:2;i:1872;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2021;}i:75;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:100:"
> x=d4		// digitalRead(4) and save it in x
> print x, a6	// print digitalRead(4) and analogRead(6)
";i:1;N;i:2;N;}i:2;i:2021;}i:76;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2021;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:"Assigning to a digital pin variable does as you would expect: it turns the output on or off, just like digitalWrite.";}i:2;i:2130;}i:78;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2252;}i:79;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:27:"
> d13 = 1		// turn on D13
";i:1;N;i:2;N;}i:2;i:2252;}i:80;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2252;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:"Assigning to the a-pin variables is a little tricky.  You might think from the name that it does some sort of output to an analog pin.  But, not so.  Assigning to an analog pin variable does analogWrite, which is PWM output to a DIGITAL ";}i:2;i:2288;}i:82;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PIN";}i:2;i:2525;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"!!";}i:2;i:2528;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2536;}i:85;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:101:"
> pinmode(5, 1)	// set D5 to digital output mode
> a5 = 128	// generate 50% duty cycle PWM on pin 5
";i:1;N;i:2;N;}i:2;i:2536;}i:86;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2645;}i:87;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2652;}i:88;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Numeric Constants";i:1;i:3;i:2;i:2652;}i:2;i:2652;}i:89;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2652;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2652;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"Decimal signed numeric constants in the range of a 32-bit signed integer are supported as you would expect.
Hex constants of the form 0xHHHHHHHH also work, as do single-quoted ascii character constants like 'q'.
Binary constants of the form 0b01010101 are also supported.";}i:2;i:2681;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2952;}i:93;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:2952;}i:94;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2959;}i:95;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"String Constants";i:1;i:3;i:2;i:2959;}i:2;i:2959;}i:96;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2959;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2959;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:295:"String constants can be used within the Print statement.  A string standing alone is treated as a comment and ignored.
The rules for special characters in string constants are similar to C.  The backslash character specifies that an escape sequence is to follow.  Here are the supported escapes:";}i:2;i:2987;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3288;}i:100;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:139:"
\r		0d		carriage return
\n		0a		linefeed
\t		09		tab
\\		'\'		a backslash
\"		'"'		a double quote
\xHH	???		hex character specified by HH
";i:1;N;i:2;N;}i:2;i:3288;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3288;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"For example, some terminal emulators will beep if you send them an Ascii BEL character (07):";}i:2;i:3436;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3534;}i:104;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:27:"
> print "\x07",		// beep!
";i:1;N;i:2;N;}i:2;i:3534;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3534;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"The hex form is especially useful in crafting escape sequences to print to peripheral devices.";}i:2;i:3570;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3664;}i:108;a:3:{i:0;s:2:"hr";i:1;a:0:{}i:2;i:3664;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3671;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Operators and Precedence";i:1;i:3;i:2;i:3671;}i:2;i:3671;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3671;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3671;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"Bitlash supports a very complete subset of the C operator suite, with very similar precedence rules.
Here are the supported operators, with meanings as in standard C:";}i:2;i:3707;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3879;}i:115;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:48:"
 + - * / ( ) < <= > >= == != << >> ^ & | ++ --
";i:1;N;i:2;N;}i:2;i:3879;}i:116;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3935;}i:117;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:3935;}}